// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Reviewer is an autogenerated mock type for the Reviewer type
type Reviewer struct {
	mock.Mock
}

// DelReviewKey provides a mock function with given fields: ctx, id
func (_m *Reviewer) DelReviewKey(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditReviewInDB provides a mock function with given fields: ctx, id, review
func (_m *Reviewer) EditReviewInDB(ctx context.Context, id string, review string) (int64, error) {
	ret := _m.Called(ctx, id, review)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(ctx, id, review)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, review)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReviewInCache provides a mock function with given fields: ctx, id
func (_m *Reviewer) GetReviewInCache(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReviewInDB provides a mock function with given fields: ctx, id
func (_m *Reviewer) GetReviewInDB(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchKeywordInCache provides a mock function with given fields: ctx, keyword
func (_m *Reviewer) SearchKeywordInCache(ctx context.Context, keyword string) (string, error) {
	ret := _m.Called(ctx, keyword)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, keyword)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, keyword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchKeywordInDB provides a mock function with given fields: ctx, keyword
func (_m *Reviewer) SearchKeywordInDB(ctx context.Context, keyword string) error {
	ret := _m.Called(ctx, keyword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, keyword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchReviewByKeywordInDB provides a mock function with given fields: ctx, keyword
func (_m *Reviewer) SearchReviewByKeywordInDB(ctx context.Context, keyword string) ([]string, error) {
	ret := _m.Called(ctx, keyword)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, keyword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, keyword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetKeywordInCache provides a mock function with given fields: ctx, keyword, review, exp
func (_m *Reviewer) SetKeywordInCache(ctx context.Context, keyword string, review string, exp time.Duration) error {
	ret := _m.Called(ctx, keyword, review, exp)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) error); ok {
		r0 = rf(ctx, keyword, review, exp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetReviewInCache provides a mock function with given fields: ctx, id, review, exp
func (_m *Reviewer) SetReviewInCache(ctx context.Context, id string, review string, exp time.Duration) error {
	ret := _m.Called(ctx, id, review, exp)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) error); ok {
		r0 = rf(ctx, id, review, exp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
